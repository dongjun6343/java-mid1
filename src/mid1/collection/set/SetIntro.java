package mid1.collection.set;

public class SetIntro {
    /**
     * set
     * - 유일성 (중복된 요소가 없다.)
     * - 순서를 보장하지 않는다.
     * - 빠른 조회( 빠른 검색 )
     * - 중복을 허용하지 않고 요소의 유무만 중요한 경우 사용
     *
     * set은 수학적 개념인 집합.
     *
     *  HashSet : 순서를 보장하지 않으며, 특정 요소가 집합에 있는지 여부를 확인하는데 최적화
     *  LinkedHashSet : HashSet + 연결 리스트(LinkedList)를 추가해서 요소들의 순서를 유지 , 데이터의 유일성과 함께 삽입 순서를 유지해야할 때 적절
     *   -> Node.
     *
     *  TreeSet : 이진 탐색 트리를 개선한 레드-블랙 트리를 내부에서 사용
     *   - 정렬된 순서로 유지하면서 집합의 특성을 유지해야 할 때 사용
     *   - 범위 검색이나 정렬된 데이터가 필요한 경우 유용(입력한 순서가 아니라 데이터 값의 순서!)
     *      => 3 , 1 , 2 로 입력해도 1,2,3 순서로 출력
     *
     *  트리 구조
     *  class Node {
     *      Object item;
     *      Node left;
     *      Node right;
     *  }
     * 트리 구조는 왼쪽, 오른쪽 노드를 알고 있으면 된다.
     *
     * 이진 탐색 트리의 핵심은 한번에 절반을 날린다는 것!!
     *
     *  만약!
     *  1-> 5 -> 6 -> 10 -> 15 로 되어있으면
     * 6을 기준으로 다시 정렬한다. (레드-블랙 트리 알고리즘)
     *  1 <- 5 <- 6 -> 10 -> 15
     *
     * [정리]
     * 실무에서 Set이 필요한 경우 HashSet을 가장 많이 사용
     * 입력 순서 유지나 값 정렬의 필요에 따라서 LinkedHashSet, TreeSet을 선택하자
     */
}
